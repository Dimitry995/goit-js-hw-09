{"mappings":"YAAA,IAAMA,EAAO,CACXC,YAAaC,SAASC,cAAc,UAElCC,EAAS,KAyBb,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BT,EAASU,YAAW,WACdN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAjCPP,EAAKC,YAAYc,iBAAiB,UAElC,SAAsBC,GACpBA,EAAKC,iBACLC,aAAad,GACb,IAAgCe,EAAAH,EAAKI,OAAOC,SAApCC,EAAwBH,EAAxBZ,MAAOgB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAYC,OAAOJ,EAAMK,OAC7B,GAAIL,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EAEtD,YADAC,OAAOC,QAAS,qCAGlBC,SAASF,OAAOG,QAAQ,4CACxB,IAAK,IAAIC,EAAI,EAAGA,GAAKR,EAAOG,MAAOK,GAAK,EACtC3B,EAAc2B,EAAGP,GACdQ,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBuB,SAASF,OAAOG,QAAQ,sBAAqCI,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEpE6B,OAAM,SAAAF,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBuB,SAASF,OAAOC,QAAQ,qBAAoCM,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEtEkB,GAAaC,OAAOH,EAAKI,OAE3BX,EAAKqB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  formInputEl: document.querySelector('.form'),\n};\nlet timeId = null;\nrefs.formInputEl.addEventListener('submit', onFormSubmit);\n/** functions */\nfunction onFormSubmit(evet) {\n  evet.preventDefault();\n  clearTimeout(timeId);\n  const { delay, step, amount } = evet.target.elements;\n  let stepValue = Number(delay.value);\n  if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n    Notify.failure(`All fields must be more than zero`);\n    return;\n  }\n  Notiflix.Notify.success('Please observe the promises appear below');\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, stepValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise #${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise #${position} in ${delay}ms`);\n      });\n    stepValue += Number(step.value);\n  }\n  evet.currentTarget.reset();\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    timeId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$refs","formInputEl","document","querySelector","$ce04d3a99e08e73b$var$timeId","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evet","preventDefault","clearTimeout","_elements","target","elements","delay1","step","amount","stepValue","Number","value","Notify","failure","Notiflix","success","i","then","param","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.dc0bb733.js.map"}